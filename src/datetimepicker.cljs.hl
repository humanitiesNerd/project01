(ns project0.datetimepicker
  (:require [cljs-time.core :as time]
            [cljs-time.format :as f]
            )
  
  )


(defelem tabs [attr kids]
  ((div :class "ui top attached tabular menu") attr kids)
  )

;"ui bottom attached active tab inverted segment"

(defelem tab-trigger [{:keys [state] :as attr} kids]
  ((div :class "item")
   :class (cell= {:active state})
   (dissoc attr :state) kids)
  )

(defelem tab-content [attr kids]
  (div :class "ui bottom attached active tab segment")
  attr kids)

(defelem days-slider [{:keys [selected-daytime] :as attr} kids]
  (let [today (time/day (time/now))
        tomorrow (time/day (time/plus (time/now) (time/days 1)))
        ;selcted-day (time/day selected-daytime)
        selected-day-cell
        (cell= (cond (= (time/day selected-daytime) today) "oggi"
                     (= (time/day selected-daytime) tomorrow) "domani"
                     :else "ciao" ;TODO formattiamo la data
                     ))
        ]
    
  (div :class "ui celled center aligned grid"
       (div :class "two wide column"
            "ieri")
       (div :class "ten wide column"
            (text "~{selected-day-cell}"))
       (div :class "two wide column"
            :click
            (fn [_]
              (swap!
               selected-daytime
               #(time/plus %1 (time/days 1))))
            "avanti"))
  )
  )


(defn datepicker [dimmer-state selected-daytime]
  (let [
        selected-tab (cell :partenza)
        dimmer-classes (cell=  {:visible dimmer-state
                                :active dimmer-state
                                :hidden (not dimmer-state)}
                               )
        dimmer-styles (cell= (if dimmer-state
                               {:height "300px"}
                               {:height nil}))
        ]
    ((div :class "ui dimmer modals page transition")
     :class dimmer-classes ;:css dimmer-styles
     ((div :class "ui basic modal scrolling transition")
      :class dimmer-classes ;:css dimmer-styles

      ((tabs ) :class "inverted"

       ((tab-trigger
         :state (cell= (= selected-tab :partenza)))
        :click (fn [ev] (swap! selected-tab (fn [_] :partenza)))
        "Partenza" )

       ((tab-trigger
         :state (cell= (= selected-tab :arrivo)))
        :click (fn [ev] (swap! selected-tab (fn [_] :arrivo)))
        "Arrivo")
       )
      
      (tab-content :class "inverted"
                   (p "Time slider")

                   
                   (days-slider :selected-daytime selected-daytime)            

                   )
      )

     ))
    )
