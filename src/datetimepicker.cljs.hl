(ns project0.datetimepicker
  (:require [cljs-time.core :as time]
            [cljs-time.format :as f]
            )
  
  )


(defelem tabs [attr kids]
  ((div :class "ui top attached tabular menu") attr kids)
  )

;"ui bottom attached active tab inverted segment"

(defelem tab-trigger [{:keys [state] :as attr} kids]
  ((div :class "item")
   :class (cell= {:active state})
   (dissoc attr :state) kids)
  )

(defelem tab-content [attr kids]
  (div :class "ui bottom attached active tab segment")
  attr kids)

(defelem days-slider [{:keys [selected-daytime formatted-moment] :as attr} kids]
  (let [time-of-choice (js/moment @selected-daytime)
        selected-day-cell
        (cell= (cond
                 (.isSame selected-daytime time-of-choice) "oggi"
                 (.isSame selected-daytime (.add (js/moment time-of-choice) 1 "days")) "domani"
                 :else formatted-moment 
                     ))
        back-arrow-state
        (cell= {:hidden (= selected-day-cell "oggi")})]
    
  (div :class "ui celled center aligned grid"
       ((div :class "two wide column") 
           
        ((i  :click
             (fn [_] (swap!
                      selected-daytime
                      #(.subtract (js/moment %1) 1 "d")))
             :class "caret left icon") :class back-arrow-state )
        )

       
       (div :class "ten wide column"
            (text "~{selected-day-cell}"))
       (div :class "two wide column"
            :click
            (fn [_]
              (swap!
               selected-daytime
               #(.add (js/moment %1) 1 "days")))
            "avanti"))
  
  )
  )


(defn datepicker [dimmer-state selected-daytime formatted-moment]
  (let [
        selected-tab (cell :partenza)
        dimmer-classes (cell=  {:visible dimmer-state
                                :active dimmer-state
                                :hidden (not dimmer-state)}
                               )
        dimmer-styles (cell= (if dimmer-state
                               {:height "300px"}
                               {:height nil}))
        ]
    ((div :class "ui dimmer modals page transition")
     :class dimmer-classes ;:css dimmer-styles
     ((div :class "ui basic modal scrolling transition")
      :class dimmer-classes ;:css dimmer-styles

      ((tabs ) :class "inverted"

       ((tab-trigger
         :state (cell= (= selected-tab :partenza)))
        :click (fn [ev] (swap! selected-tab (fn [_] :partenza)))
        "Partenza" )

       ((tab-trigger
         :state (cell= (= selected-tab :arrivo)))
        :click (fn [ev] (swap! selected-tab (fn [_] :arrivo)))
        "Arrivo")
       )
      
      (tab-content :class "inverted"
                   (p "Time slider")

                   
                   (days-slider :selected-daytime selected-daytime :formatted-moment formatted-moment)            

                   )
      )

     ))
    )
